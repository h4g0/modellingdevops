<?xml version='1.0' encoding='UTF-8'?>
<devops2:Pipeline xmlns:xmi="http://www.omg.org/XMI" xmlns:devops2="http://www.example.org/devops2" Name="CI" xmi:version="2.0">
  <permission Key="contents" Value="write"/>
  <permission Key="id-token" Value="write"/>
  <permission Key="contents" Value="write"/>
  <permission Key="id-token" Value="write"/>
  <environment Key="DEBUG" Value="napi:*"/>
  <environment Key="APP_NAME" Value="package-template"/>
  <environment Key="MACOSX_DEPLOYMENT_TARGET" Value="10.13"/>
  <environment Key="concurrency" Value="group: ${{ github.workflow }}-${{ github.ref }}&#10;cancel-in-progress: true&#10;"/>
  <job Name="build">
    <tool Name="${{ matrix.settings.host }}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        settings:&#10;        -   host: macos-latest&#10;            target: x86_64-apple-darwin&#10;            build: 'yarn build&#10;&#10;                strip -x *.node&#10;&#10;                '&#10;        -   host: windows-latest&#10;            build: yarn build&#10;            target: x86_64-pc-windows-msvc&#10;        -   host: windows-latest&#10;            build: 'yarn build --target i686-pc-windows-msvc&#10;&#10;                yarn test&#10;&#10;                '&#10;            target: i686-pc-windows-msvc&#10;        -   host: ubuntu-latest&#10;            target: x86_64-unknown-linux-gnu&#10;            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian&#10;            build: 'set -e &amp;&amp;&#10;&#10;                yarn build --target x86_64-unknown-linux-gnu &amp;&amp;&#10;&#10;                strip *.node'&#10;        -   host: ubuntu-latest&#10;            target: x86_64-unknown-linux-musl&#10;            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine&#10;            build: set -e &amp;&amp; yarn build &amp;&amp; strip *.node&#10;        -   host: macos-latest&#10;            target: aarch64-apple-darwin&#10;            build: 'sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;&#10;&#10;                export CC=$(xcrun -f clang);&#10;&#10;                export CXX=$(xcrun -f clang++);&#10;&#10;                SYSROOT=$(xcrun --sdk macosx --show-sdk-path);&#10;&#10;                export CFLAGS=&quot;-isysroot $SYSROOT -isystem $SYSROOT&quot;;&#10;&#10;                yarn build --target aarch64-apple-darwin&#10;&#10;                strip -x *.node&#10;&#10;                '&#10;        -   host: ubuntu-latest&#10;            target: aarch64-unknown-linux-gnu&#10;            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64&#10;            build: 'set -e &amp;&amp;&#10;&#10;                yarn build --target aarch64-unknown-linux-gnu &amp;&amp;&#10;&#10;                aarch64-unknown-linux-gnu-strip *.node'&#10;        -   host: ubuntu-latest&#10;            target: armv7-unknown-linux-gnueabihf&#10;            setup: 'sudo apt-get update&#10;&#10;                sudo apt-get install gcc-arm-linux-gnueabihf -y&#10;&#10;                '&#10;            build: 'yarn build --target armv7-unknown-linux-gnueabihf&#10;&#10;                arm-linux-gnueabihf-strip *.node&#10;&#10;                '&#10;        -   host: ubuntu-latest&#10;            target: aarch64-linux-android&#10;            build: 'yarn build --target aarch64-linux-android&#10;&#10;                ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip&#10;                *.node&#10;&#10;                '&#10;        -   host: ubuntu-latest&#10;            target: armv7-linux-androideabi&#10;            build: 'yarn build --target armv7-linux-androideabi&#10;&#10;                ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip&#10;                *.node&#10;&#10;                '&#10;        -   host: ubuntu-latest&#10;            target: aarch64-unknown-linux-musl&#10;            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine&#10;            build: 'set -e &amp;&amp;&#10;&#10;                rustup target add aarch64-unknown-linux-musl &amp;&amp;&#10;&#10;                yarn build --target aarch64-unknown-linux-musl &amp;&amp;&#10;&#10;                /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node'&#10;        -   host: windows-latest&#10;            target: aarch64-pc-windows-msvc&#10;            build: yarn build --target aarch64-pc-windows-msvc&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Cache cargo" depends="//@job.0/@ifthenelse.1/@true/@command.0">
      <tool Name="actions/cache@v3"/>
      <parameter Parameter="path: '~/.cargo/registry/index/&#10;&#10;    ~/.cargo/registry/cache/&#10;&#10;    ~/.cargo/git/db/&#10;&#10;    .cargo-cache&#10;&#10;    target/&#10;&#10;    '&#10;key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}&#10;"/>
    </command>
    <command Name="Install dependencies" depends="//@job.0/@ifthenelse.4/@true/@command.0">
      <tool Name="yarn install"/>
    </command>
    <command Name="Upload artifact" depends="//@job.0/@ifthenelse.7/@true/@command.0">
      <tool Name="actions/upload-artifact@v3"/>
      <parameter Parameter="name: bindings-${{ matrix.settings.target }}&#10;path: ${{ env.APP_NAME }}.*.node&#10;if-no-files-found: error&#10;"/>
    </command>
    <ifthenelse Condition="${{ !matrix.settings.docker }}">
      <true>
        <command Name="Setup node" depends="//@job.0/@command.0">
          <tool Name="actions/setup-node@v4"/>
          <parameter Parameter="node-version: 18&#10;cache: yarn&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ !matrix.settings.docker }}">
      <true>
        <command Name="Install" depends="//@job.0/@ifthenelse.0/@true/@command.0">
          <tool Name="dtolnay/rust-toolchain@stable"/>
          <parameter Parameter="toolchain: stable&#10;targets: ${{ matrix.settings.target }}&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}">
      <true>
        <command depends="//@job.0/@command.1">
          <tool Name="goto-bus-stop/setup-zig@v2"/>
          <parameter Parameter="version: 0.11.0&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.settings.setup }}">
      <true>
        <command Name="Setup toolchain" depends="//@job.0/@ifthenelse.2/@true/@command.0">
          <tool Name="${{ matrix.settings.setup }}"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.settings.target == 'i686-pc-windows-msvc'">
      <true>
        <command Name="Setup node x86" depends="//@job.0/@ifthenelse.3/@true/@command.0">
          <tool Name="yarn config set supportedArchitectures.cpu &quot;ia32&quot;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.settings.target == 'i686-pc-windows-msvc'">
      <true>
        <command Name="Setup node x86" depends="//@job.0/@command.2">
          <tool Name="actions/setup-node@v4"/>
          <parameter Parameter="node-version: 18&#10;cache: yarn&#10;architecture: x86&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.settings.docker }}">
      <true>
        <command Name="Build in docker" depends="//@job.0/@ifthenelse.5/@true/@command.0">
          <tool Name="addnab/docker-run-action@v3"/>
          <parameter Parameter="image: ${{ matrix.settings.docker }}&#10;options: --user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db&#10;    -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache&#10;    -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index&#10;    -v ${{ github.workspace }}:/build -w /build&#10;run: ${{ matrix.settings.build }}&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ !matrix.settings.docker }}">
      <true>
        <command Name="Build" depends="//@job.0/@ifthenelse.6/@true/@command.0">
          <tool Name="${{ matrix.settings.build }}"/>
        </command>
      </true>
    </ifthenelse>
  </job>
  <job Name="build-freebsd">
    <tool Name="macos-13"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Build" depends="//@job.1/@command.0">
      <tool Name="cross-platform-actions/action@v0.21.1"/>
      <parameter Parameter="operating_system: freebsd&#10;version: '13.2'&#10;memory: 13G&#10;cpu_count: 3&#10;environment_variables: DEBUG RUSTUP_IO_THREADS&#10;shell: bash&#10;run: 'sudo pkg install -y -f curl node libnghttp2 npm&#10;&#10;    sudo npm install -g yarn --ignore-scripts&#10;&#10;    curl https://sh.rustup.rs -sSf --output rustup.sh&#10;&#10;    sh rustup.sh -y --profile minimal --default-toolchain beta&#10;&#10;    source &quot;$HOME/.cargo/env&quot;&#10;&#10;    echo &quot;~~~~ rustc --version ~~~~&quot;&#10;&#10;    rustc --version&#10;&#10;    echo &quot;~~~~ node -v ~~~~&quot;&#10;&#10;    node -v&#10;&#10;    echo &quot;~~~~ yarn --version ~~~~&quot;&#10;&#10;    yarn --version&#10;&#10;    pwd&#10;&#10;    ls -lah&#10;&#10;    whoami&#10;&#10;    env&#10;&#10;    freebsd-version&#10;&#10;    yarn install&#10;&#10;    yarn build&#10;&#10;    rm -rf node_modules&#10;&#10;    rm -rf target&#10;&#10;    rm -rf .yarn/cache&#10;&#10;    '&#10;"/>
    </command>
    <command Name="Upload artifact" depends="//@job.1/@command.1">
      <tool Name="actions/upload-artifact@v3"/>
      <parameter Parameter="name: bindings-freebsd&#10;path: ${{ env.APP_NAME }}.*.node&#10;if-no-files-found: error&#10;"/>
    </command>
  </job>
  <job Name="test-macOS-windows-binding">
    <tool Name="${{ matrix.settings.host }}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        settings:&#10;        -   host: windows-latest&#10;            target: x86_64-pc-windows-msvc&#10;        -   host: macos-latest&#10;            target: x86_64-apple-darwin&#10;        node:&#10;        - '18'&#10;        - '20'&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Setup node" depends="//@job.2/@command.0">
      <tool Name="actions/setup-node@v4"/>
      <parameter Parameter="node-version: ${{ matrix.node }}&#10;cache: yarn&#10;"/>
    </command>
    <command Name="Install dependencies" depends="//@job.2/@command.1">
      <tool Name="yarn install"/>
    </command>
    <command Name="Download artifacts" depends="//@job.2/@command.2">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-${{ matrix.settings.target }}&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.2/@command.3">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Test bindings" depends="//@job.2/@command.4">
      <tool Name="yarn test"/>
    </command>
  </job>
  <job Name="test-linux-x64-gnu-binding">
    <tool Name="ubuntu-latest"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        node:&#10;        - '18'&#10;        - '20'&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Setup node" depends="//@job.3/@command.0">
      <tool Name="actions/setup-node@v4"/>
      <parameter Parameter="node-version: ${{ matrix.node }}&#10;cache: yarn&#10;"/>
    </command>
    <command Name="Install dependencies" depends="//@job.3/@command.1">
      <tool Name="yarn install"/>
    </command>
    <command Name="Download artifacts" depends="//@job.3/@command.2">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-x86_64-unknown-linux-gnu&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.3/@command.3">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Test bindings" depends="//@job.3/@command.4">
      <tool Name="docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test"/>
    </command>
  </job>
  <job Name="test-linux-x64-musl-binding">
    <tool Name="ubuntu-latest"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        node:&#10;        - '18'&#10;        - '20'&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Setup node" depends="//@job.4/@command.0">
      <tool Name="actions/setup-node@v4"/>
      <parameter Parameter="node-version: ${{ matrix.node }}&#10;cache: yarn&#10;"/>
    </command>
    <command Name="Install dependencies" depends="//@job.4/@command.1">
      <tool Name="yarn config set supportedArchitectures.libc &quot;musl&quot;&#10;yarn install&#10;"/>
    </command>
    <command Name="Download artifacts" depends="//@job.4/@command.2">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-x86_64-unknown-linux-musl&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.4/@command.3">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Test bindings" depends="//@job.4/@command.4">
      <tool Name="docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test"/>
    </command>
  </job>
  <job Name="test-linux-aarch64-gnu-binding">
    <tool Name="ubuntu-latest"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        node:&#10;        - '18'&#10;        - '20'&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Download artifacts" depends="//@job.5/@command.0">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-aarch64-unknown-linux-gnu&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.5/@command.1">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Install dependencies" depends="//@job.5/@command.2">
      <tool Name="yarn config set supportedArchitectures.cpu &quot;arm64&quot;&#10;yarn config set supportedArchitectures.libc &quot;glibc&quot;&#10;yarn install&#10;"/>
    </command>
    <command Name="Set up QEMU" depends="//@job.5/@command.3">
      <tool Name="docker/setup-qemu-action@v3"/>
      <parameter Parameter="platforms: arm64&#10;"/>
    </command>
    <command depends="//@job.5/@command.4">
      <tool Name="docker run --rm --privileged multiarch/qemu-user-static --reset -p yes"/>
    </command>
    <command Name="Setup and run tests" depends="//@job.5/@command.5">
      <tool Name="addnab/docker-run-action@v3"/>
      <parameter Parameter="image: node:${{ matrix.node }}-slim&#10;options: --platform linux/arm64 -v ${{ github.workspace }}:/build -w /build&#10;run: 'set -e&#10;&#10;    yarn test&#10;&#10;    ls -la&#10;&#10;    '&#10;"/>
    </command>
  </job>
  <job Name="test-linux-aarch64-musl-binding">
    <tool Name="ubuntu-latest"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Download artifacts" depends="//@job.6/@command.0">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-aarch64-unknown-linux-musl&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.6/@command.1">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Install dependencies" depends="//@job.6/@command.2">
      <tool Name="yarn config set supportedArchitectures.cpu &quot;arm64&quot;&#10;yarn config set supportedArchitectures.libc &quot;musl&quot;&#10;yarn install&#10;"/>
    </command>
    <command Name="Set up QEMU" depends="//@job.6/@command.3">
      <tool Name="docker/setup-qemu-action@v3"/>
      <parameter Parameter="platforms: arm64&#10;"/>
    </command>
    <command depends="//@job.6/@command.4">
      <tool Name="docker run --rm --privileged multiarch/qemu-user-static --reset -p yes"/>
    </command>
    <command Name="Setup and run tests" depends="//@job.6/@command.5">
      <tool Name="addnab/docker-run-action@v3"/>
      <parameter Parameter="image: node:lts-alpine&#10;options: --platform linux/arm64 -v ${{ github.workspace }}:/build -w /build&#10;run: 'set -e&#10;&#10;    yarn test&#10;&#10;    '&#10;"/>
    </command>
  </job>
  <job Name="test-linux-arm-gnueabihf-binding">
    <tool Name="ubuntu-latest"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        node:&#10;        - '18'&#10;        - '20'&#10;"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Download artifacts" depends="//@job.7/@command.0">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="name: bindings-armv7-unknown-linux-gnueabihf&#10;path: .&#10;"/>
    </command>
    <command Name="List packages" depends="//@job.7/@command.1">
      <tool Name="ls -R ."/>
    </command>
    <command Name="Install dependencies" depends="//@job.7/@command.2">
      <tool Name="yarn config set supportedArchitectures.cpu &quot;arm&quot;&#10;yarn install&#10;"/>
    </command>
    <command Name="Set up QEMU" depends="//@job.7/@command.3">
      <tool Name="docker/setup-qemu-action@v3"/>
      <parameter Parameter="platforms: arm&#10;"/>
    </command>
    <command depends="//@job.7/@command.4">
      <tool Name="docker run --rm --privileged multiarch/qemu-user-static --reset -p yes"/>
    </command>
    <command Name="Setup and run tests" depends="//@job.7/@command.5">
      <tool Name="addnab/docker-run-action@v3"/>
      <parameter Parameter="image: node:${{ matrix.node }}-bullseye-slim&#10;options: --platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build&#10;run: 'set -e&#10;&#10;    yarn test&#10;&#10;    ls -la&#10;&#10;    '&#10;"/>
    </command>
  </job>
  <job Name="publish">
    <tool Name="ubuntu-latest"/>
    <command>
      <tool Name="actions/checkout@v4"/>
    </command>
    <command Name="Setup node" depends="//@job.8/@command.0">
      <tool Name="actions/setup-node@v4"/>
      <parameter Parameter="node-version: 18&#10;cache: yarn&#10;"/>
    </command>
    <command Name="Install dependencies" depends="//@job.8/@command.1">
      <tool Name="yarn install"/>
    </command>
    <command Name="Download all artifacts" depends="//@job.8/@command.2">
      <tool Name="actions/download-artifact@v3"/>
      <parameter Parameter="path: artifacts&#10;"/>
    </command>
    <command Name="Move artifacts" depends="//@job.8/@command.3">
      <tool Name="yarn artifacts"/>
    </command>
    <command Name="List packages" depends="//@job.8/@command.4">
      <tool Name="ls -R ./npm"/>
    </command>
    <command Name="Publish" depends="//@job.8/@command.5">
      <tool Name="npm config set provenance true&#10;if git log -1 --pretty=%B | grep &quot;^[0-9]\+\.[0-9]\+\.[0-9]\+$&quot;;&#10;then&#10;  echo &quot;//registry.npmjs.org/:_authToken=$NPM_TOKEN&quot; &gt;&gt; ~/.npmrc&#10;  npm publish --access public&#10;elif git log -1 --pretty=%B | grep &quot;^[0-9]\+\.[0-9]\+\.[0-9]\+&quot;;&#10;then&#10;  echo &quot;//registry.npmjs.org/:_authToken=$NPM_TOKEN&quot; &gt;&gt; ~/.npmrc&#10;  npm publish --tag next --access public&#10;else&#10;  echo &quot;Not a release, skipping publish&quot;&#10;fi&#10;"/>
      <parameter Parameter="GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#10;NPM_TOKEN: ${{ secrets.NPM_TOKEN }}&#10;"/>
    </command>
  </job>
</devops2:Pipeline>
