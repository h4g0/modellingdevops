<?xml version='1.0' encoding='UTF-8'?>
<devops2:Pipeline xmlns:xmi="http://www.omg.org/XMI" xmlns:devops2="http://www.example.org/devops2" Name="Analysis" xmi:version="2.0">
  <when Trigger="push:&#10;    branches:&#10;    - main&#10;"/>
  <when Trigger="pull_request:&#10;    branches:&#10;    - main&#10;    - release/**&#10;    - develop/**&#10;    paths-ignore:&#10;    - docs/**&#10;"/>
  <environment Key="CTEST_OUTPUT_ON_FAILURE" Value="1"/>
  <environment Key="CCACHE_DIR" Value="${{ github.workspace }}/ccache"/>
  <environment Key="CCACHE_MAXSIZE" Value="500M"/>
  <environment Key="CCACHE_KEY_SUFFIX" Value="r1"/>
  <environment Key="concurrency" Value="group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}&#10;cancel-in-progress: true&#10;"/>
  <job Name="build_debug">
    <tool Name="ubuntu-latest"/>
    <tool Name="container: ghcr.io/acts-project/ubuntu2204:v41&#10;"/>
    <command>
      <tool Name="actions/checkout@v3"/>
    </command>
    <command Name="Cache build" depends="//@job.0/@command.0">
      <tool Name="actions/cache@v3"/>
      <parameter Parameter="path: ${{ github.workspace }}/ccache&#10;key: ${{ runner.os  }}-ccache-linux_ubuntu_debug_${{ env.CCACHE_KEY_SUFFIX }}_${{&#10;    github.sha }}&#10;restore-keys: '${{ runner.os  }}-ccache-linux_ubuntu_debug_${{ env.CCACHE_KEY_SUFFIX&#10;    }}_&#10;&#10;    '&#10;"/>
    </command>
    <command Name="Configure" depends="//@job.0/@command.1">
      <tool Name="ccache -z &amp;&amp; cmake -B build -S . -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=&quot;-Werror -gz -g1&quot; -DACTS_BUILD_UNITTESTS=on -DACTS_LOG_FAILURE_THRESHOLD=WARNING&#10;"/>
    </command>
    <command Name="Build" depends="//@job.0/@command.2">
      <tool Name="cmake --build build"/>
    </command>
    <command Name="ccache stats" depends="//@job.0/@command.3">
      <tool Name="ccache -s"/>
    </command>
    <command Name="Unit tests" depends="//@job.0/@command.4">
      <tool Name="cmake --build build --target test"/>
    </command>
    <command Name="Remove .o files" depends="//@job.0/@command.5">
      <tool Name="du -sh build &amp;&amp; find build -name *.o -delete &amp;&amp; du -sh build&#10;"/>
    </command>
    <command Name="Coverage" depends="//@job.0/@command.6">
      <tool Name="pip3 install gcovr==6.0 &amp;&amp; cd build &amp;&amp; /usr/bin/python3 ../CI/test_coverage.py&#10;"/>
    </command>
    <command Name="Upload coverage" depends="//@job.0/@command.7">
      <tool Name="codecov/codecov-action@v3"/>
      <parameter Parameter="files: ./build/coverage/cov.xml&#10;"/>
    </command>
  </job>
  <job Name="build_performance">
    <tool Name="ubuntu-latest"/>
    <tool Name="container: ghcr.io/acts-project/ubuntu2204:v41&#10;"/>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command>
          <tool Name="actions/checkout@v3"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Install dependencies" depends="//@job.1/@ifthenelse.0/@true/@command.0">
          <tool Name="pip3 install git+https://github.com/paulgessinger/cmakeperf.git@ece8fc8"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Configure" depends="//@job.1/@ifthenelse.1/@true/@command.0">
          <tool Name="cmake -B build -S . -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_FLAGS=&quot;-Werror&quot; -DACTS_BUILD_EVERYTHING=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Measure" depends="//@job.1/@ifthenelse.2/@true/@command.0">
          <tool Name="cmakeperf collect build/compile_commands.json -o perf.csv"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Results" depends="//@job.1/@ifthenelse.3/@true/@command.0">
          <tool Name="cmakeperf print perf.csv"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command depends="//@job.1/@ifthenelse.4/@true/@command.0">
          <tool Name="actions/upload-artifact@v3"/>
          <parameter Parameter="name: cmakeperf&#10;path: perf.csv&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
  <job Name="metric_tracking" depends="//@job.1">
    <tool Name="ubuntu-latest"/>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command>
          <tool Name="actions/checkout@v3"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Install dependencies" depends="//@job.2/@ifthenelse.0/@true/@command.0">
          <tool Name="pip3 install git+https://github.com/paulgessinger/headwind.git@eeeaa80"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command depends="//@job.2/@ifthenelse.1/@true/@command.0">
          <tool Name="actions/download-artifact@v2"/>
          <parameter Parameter="name: cmakeperf&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="github.ref == 'refs/heads/main'">
      <true>
        <command Name="Run collection" depends="//@job.2/@ifthenelse.2/@true/@command.0">
          <tool Name="ssh-agent -a $SSH_AUTH_SOCK &gt; /dev/null&#10;ssh-add - &lt;&lt;&lt; &quot;${{ secrets.METRIC_DEPLOY_SSH_KEY }}&quot;&#10;git config --global user.email &quot;action@github.com&quot;&#10;git config --global user.name &quot;GitHub Action&quot;&#10;git clone git@github.com:acts-project/metrics.git&#10;hdw collect CI/headwind.yml --commit $(git log --pretty=format:'%H' -1)&#10;cd metrics&#10;git add -A&#10;git commit -m&quot;update metrics&quot;&#10;git push&#10;"/>
          <parameter Parameter="SSH_AUTH_SOCK: /tmp/ssh_agent.sock&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
</devops2:Pipeline>
