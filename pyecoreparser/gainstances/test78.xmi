<?xml version='1.0' encoding='UTF-8'?>
<devops2:Pipeline xmlns:xmi="http://www.omg.org/XMI" xmlns:devops2="http://www.example.org/devops2" Name="CI" xmi:version="2.0">
  <when Trigger="push: null&#10;"/>
  <when Trigger="pull_request: null&#10;"/>
  <job Name="build">
    <environment Key="VCPKG_ROOT" Value="${{ github.workspace }}/vcpkg"/>
    <environment Key="CMAKE_BUILD_TYPE" Value="MinSizeRel"/>
    <tool Name="${{ matrix.os }}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        include:&#10;        -   name: Windows&#10;            os: windows-latest&#10;            triplet: x64-windows-release&#10;        -   name: Ubuntu GCC&#10;            os: ubuntu-latest&#10;            triplet: x64-linux-release&#10;        -   name: MacOS&#10;            os: macos-11&#10;            triplet: x64-osx-release&#10;"/>
    <command Name="Checkout" depends="//@job.0/@ifthenelse.0/@true/@command.0">
      <tool Name="actions/checkout@v2"/>
    </command>
    <command Name="Get CMake" depends="//@job.0/@command.0">
      <tool Name="lukka/get-cmake@latest"/>
    </command>
    <command Name="Run vcpkg" depends="//@job.0/@ifthenelse.5/@true/@command.0">
      <tool Name="lukka/run-vcpkg@v10"/>
      <parameter Parameter="vcpkgJsonGlob: '**/vcpkg.json'&#10;vcpkgDirectory: ${{ github.workspace }}/vcpkg&#10;vcpkgGitCommitId: 5f82fa45df07a446bab57f65479f3d2df797f408&#10;appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}&#10;"/>
    </command>
    <command Name="Make build dir" depends="//@job.0/@command.2">
      <tool Name="mkdir build"/>
    </command>
    <command Name="Run cmake" depends="//@job.0/@command.3">
      <tool Name="cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} .."/>
    </command>
    <command Name="Build" depends="//@job.0/@command.4">
      <tool Name="ninja"/>
    </command>
    <command Name="Test" depends="//@job.0/@command.5">
      <tool Name="build/tests/abyss_test"/>
    </command>
    <ifthenelse Condition="matrix.os == 'macos-11'">
      <true>
        <command Name="Setup XCode">
          <tool Name="maxim-lobanov/setup-xcode@v1"/>
          <parameter Parameter="xcode-version: '13.0'&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.os == 'windows-latest'">
      <true>
        <command Name="Install Deps (Windows)" depends="//@job.0/@command.1">
          <tool Name="crazy-max/ghaction-chocolatey@v1"/>
          <parameter Parameter="args: install nasm luarocks&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.os == 'windows-latest'">
      <true>
        <command Name="Use MSVC (Windows)" depends="//@job.0/@ifthenelse.1/@true/@command.0">
          <tool Name="ilammy/msvc-dev-cmd@v1"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.os == 'ubuntu-latest'">
      <true>
        <command Name="Install Deps (Ubuntu)" depends="//@job.0/@ifthenelse.2/@true/@command.0">
          <tool Name="sudo apt-get update &amp;&amp; sudo apt-get install nasm libxext-dev libavcodec-dev libavformat-dev libavdevice-dev libavfilter-dev libegl-dev gperf autoconf-archive luarocks"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.os == 'ubuntu-latest'">
      <true>
        <command Name="Install GCC (Ubuntu)" depends="//@job.0/@ifthenelse.3/@true/@command.0">
          <tool Name="sudo add-apt-repository ppa:ubuntu-toolchain-r/test &amp;&amp; sudo apt-get install g++-10 libstdc++-10-dev &amp;&amp; echo &quot;CC=gcc-10&quot; &gt;&gt; $GITHUB_ENV &amp;&amp; echo &quot;CXX=g++-10&quot; &gt;&gt; $GITHUB_ENV"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.os == 'macos-11'">
      <true>
        <command Name="Install Deps (MacOS)" depends="//@job.0/@ifthenelse.4/@true/@command.0">
          <tool Name="brew install nasm automake autoconf autoconf-archive luarocks"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.os == 'windows-latest' &amp;&amp; github.event_name == 'push' }}">
      <true>
        <command Name="Package (Windows)" depends="//@job.0/@command.6">
          <tool Name="cpack -G ZIP -C Debug ./"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.os == 'windows-latest' &amp;&amp; github.event_name == 'push' }}">
      <true>
        <command Name="Upload Release (Windows)" depends="//@job.0/@ifthenelse.6/@true/@command.0">
          <tool Name="svenstaro/upload-release-action@v2"/>
          <parameter Parameter="repo_token: ${{ secrets.GITHUB_TOKEN }}&#10;file: build/package/abyss-windows.zip&#10;overwrite: true&#10;prerelease: true&#10;tag: unstable&#10;body: Unstable Release&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.os == 'ubuntu-latest' &amp;&amp; github.event_name == 'push' }}">
      <true>
        <command Name="Package (Ubuntu)" depends="//@job.0/@ifthenelse.7/@true/@command.0">
          <tool Name="cpack -G TGZ -C Debug ./"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.os == 'macos-11' &amp;&amp; github.event_name == 'push' }}">
      <true>
        <command Name="Package (MacOS)" depends="//@job.0/@ifthenelse.8/@true/@command.0">
          <tool Name="cpack -G DragNDrop -C Debug ./"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="${{ matrix.os == 'macos-11' &amp;&amp; github.event_name == 'push' }}">
      <true>
        <command Name="Upload Release (MacOS)" depends="//@job.0/@ifthenelse.9/@true/@command.0">
          <tool Name="svenstaro/upload-release-action@v2"/>
          <parameter Parameter="repo_token: ${{ secrets.GITHUB_TOKEN }}&#10;file: build/package/abyss-darwin.dmg&#10;overwrite: true&#10;prerelease: true&#10;tag: unstable&#10;body: Unstable Release&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
</devops2:Pipeline>
