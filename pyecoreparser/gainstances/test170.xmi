<?xml version='1.0' encoding='UTF-8'?>
<devops2:Pipeline xmlns:xmi="http://www.omg.org/XMI" xmlns:devops2="http://www.example.org/devops2" Name="Build CRB" xmi:version="2.0">
  <when Trigger="pull_request:&#10;    branches:&#10;    - main&#10;    - dev&#10;"/>
  <environment Key="PULL_REQUEST_ID" Value="${{ github.event.number }}"/>
  <environment Key="CI_ROOT" Value="/data/k510/github-actions"/>
  <environment Key="TFTP_ROOT" Value="/data/tftp_server"/>
  <environment Key="NFS_ROOT" Value="/data/nfs_server"/>
  <environment Key="concurrency" Value="group: ${{ github.head_ref || github.run_id }}&#10;cancel-in-progress: true&#10;"/>
  <job Name="build_image">
    <tool Name="['self-hosted', 'k510_buildroot']"/>
    <tool Name="strategy:&#10;    matrix:&#10;        cfg:&#10;        - crb_lp3_v1_2&#10;"/>
    <tool Name="container:&#10;    image: ai.b-bug.org:5000/k510_sdk_github&#10;    env:&#10;        CONF: k510_${{ matrix.cfg }}_defconfig&#10;        ENV: pull-request&#10;    volumes:&#10;    - /data:/data&#10;    options: --hostname pull-request&#10;"/>
    <command>
      <tool Name="actions/checkout@v3"/>
      <parameter Parameter="fetch-depth: 0&#10;clean: false&#10;"/>
    </command>
    <command Name="Install toolchain" depends="//@job.0/@command.0">
      <tool Name="test -f toolchain/nds64le-linux-glibc-v5d.txz || wget -c https://ai.b-bug.org/k510/toolchain/nds64le-linux-glibc-v5d.txz -O toolchain/nds64le-linux-glibc-v5d.txz&#10;test -f toolchain/nds64le-elf-mculib-v5d.txz || wget -c https://ai.b-bug.org/k510/toolchain/nds64le-elf-mculib-v5d.txz -O toolchain/nds64le-elf-mculib-v5d.txz          &#10;"/>
    </command>
    <command Name="Download cache package" depends="//@job.0/@command.1">
      <tool Name="test -f pkg-download/dl.tar.gz &amp;&amp; rm pkg-download/dl.tar.gz&#10;wget -qc https://ai.b-bug.org/k510/downloads/pkg-download/dl.tar.gz -O pkg-download/dl.tar.gz&#10;echo &quot;dl.tar.gz file md5 check&quot;&#10;md5sum pkg-download/dl.tar.gz&#10;test -d dl_bak &amp;&amp; rm -rf dl_bak&#10;test -d dl &amp;&amp; mv dl dl_bak&#10;tar -xf pkg-download/dl.tar.gz&#10;test -d dl/ai/ || mkdir -p dl/ai/&#10;wget -qc https://ai.b-bug.org/k510/downloads/pkg-download/ai_kmodel_data.tar.xz -O dl/ai/ai_kmodel_data.tar.xz&#10;echo &quot;ai_kmodel_data.tar.xz file md5 check&quot;&#10;md5sum dl/ai/ai_kmodel_data.tar.xz&#10;test -d dl/riscv-pk-k510 &amp;&amp; (test -d dl/riscv-pk-k510 || mv dl_bak/riscv-pk-k510 dl/)&#10;test -d dl_bak &amp;&amp; rm -rf dl_bak&#10;"/>
    </command>
    <command Name="Build image" depends="//@job.0/@command.2">
      <tool Name="sed -i &quot;s/BR2_JLEVEL=5/BR2_JLEVEL=14/g&quot; configs/$CONF&#10;rm -rf $CONF&#10;rm -rf buildroot-*&#10;make CONF=$CONF&#10;"/>
    </command>
    <command Name="Save image to CI cache" depends="//@job.0/@command.3">
      <tool Name="export HW=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1&quot;_&quot;$3&quot;.&quot;$4}'`&#10;echo $HW&#10;VER=$(cat $CONF/target/etc/version/release_version | grep &quot;.*CST-github-pull-request&quot; | sed 's/\(.*\)CST-github-pull-request/\1/g') || exit 1&#10;echo $VER&#10;mkdir -p $CI_ROOT/$VER/$HW/&#10;cp -r --sparse=always $CONF/images/* $CI_ROOT/$VER/$HW/&#10;cp -r --sparse=always $CONF/target/etc/version/release_version $CI_ROOT/$VER/$HW/&#10;test -d $CI_ROOT/latest &amp;&amp; rm $CI_ROOT/latest&#10;ln -s -f $CI_ROOT/$VER $CI_ROOT/latest&#10;"/>
    </command>
    <command Name="Save image to TFTP" depends="//@job.0/@command.4">
      <tool Name="export HW=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1&quot;_&quot;$3&quot;.&quot;$4}'`&#10;export SAVE_DIR=$TFTP_ROOT/k510/$HW/$PULL_REQUEST_ID&quot;_&quot;$GITHUB_RUN_ID&#10;echo $HW&#10;echo $SAVE_DIR&#10;mkdir -p $SAVE_DIR/&#10;cp --sparse=always $CONF/images/bootm-bbl.img $SAVE_DIR/bootm-bbl.img&#10;cp --sparse=always $CONF/images/k510.dtb $SAVE_DIR/k510.dtb&#10;md5_bbl=$(md5sum $SAVE_DIR/bootm-bbl.img | awk '{print $1}')&#10;md5_dtb=$(md5sum $SAVE_DIR/k510.dtb | awk '{print $1}')&#10;echo $md5_bbl&#10;echo $md5_dtb&#10;echo &quot;md5_bbl=$md5_bbl&quot; &gt;&gt; $GITHUB_OUTPUT&#10;echo &quot;md5_dtb=$md5_dtb&quot; &gt;&gt; $GITHUB_OUTPUT&#10;"/>
    </command>
    <command Name="Save image to NFS" depends="//@job.0/@command.5">
      <tool Name="export HW=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1&quot;_&quot;$3&quot;.&quot;$4}'`&#10;export SAVE_DIR=$NFS_ROOT/k510/$HW/$PULL_REQUEST_ID&quot;_&quot;$GITHUB_RUN_ID&#10;echo $HW&#10;echo $SAVE_DIR&#10;mkdir -p $SAVE_DIR/&#10;tar -xf $CONF/images/rootfs.tar -C $SAVE_DIR/&#10;"/>
    </command>
  </job>
  <job Name="test_image" depends="//@job.0">
    <tool Name="['self-hosted', 'k510_buildroot']"/>
    <tool Name="strategy:&#10;    matrix:&#10;        cfg:&#10;        - crb_lp3_v1_2&#10;"/>
    <tool Name="container:&#10;    image: ai.b-bug.org:5000/k510_sdk_github&#10;    volumes:&#10;    - /data:/data&#10;"/>
    <command Name="Get Available DUT">
      <tool Name="echo &quot;Get Available DUT start&quot;&#10;export HW_MODEL=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1}'`&#10;export HW_VER=`echo ${{ matrix.cfg }}|awk -F '_' '{print $3&quot;.&quot;$4}'`&#10;test -d bin || mkdir ./bin&#10;test -f ./bin/ailab &amp;&amp; rm -rf ./bin/ailab&#10;wget -qc https://ai.b-bug.org/k510/downloads/github/ailab -O ./bin/ailab&#10;chmod +x ./bin/ailab&#10;available=$(./bin/ailab show --dest available --hw_type k510 --hw_model $HW_MODEL --hw_ver $HW_VER --format args)&#10;echo $available&#10;echo &quot;available=$available&quot; &gt;&gt; $GITHUB_ENV&#10;if [[ $available =~ &quot;k510&quot; ]]; then&#10;  echo &quot;Get Available DUT pass&quot;&#10;else&#10;  echo &quot;ERROR: No Available DUT, Please rerun to check it again&quot;&#10;  exit 1&#10;fi&#10;"/>
    </command>
    <command Name="Reserve DUT" depends="//@job.1/@command.0">
      <tool Name="echo &quot;Reserve DUT start&quot;&#10;echo &quot;PR ID: $PULL_REQUEST_ID&quot;&#10;echo &quot;Job ID: $GITHUB_RUN_ID&quot;&#10;reserved=$(./bin/ailab add ${{ env.available }} --time 15m --site github-actions --source $PULL_REQUEST_ID --job $GITHUB_RUN_ID --format args)&#10;echo $reserved&#10;echo &quot;reserved=$reserved&quot; &gt;&gt; $GITHUB_ENV&#10;if [[ $reserved =~ &quot;github-actions&quot; ]]; then&#10;  echo &quot;Reserve DUT pass&quot;&#10;else&#10;  echo &quot;ERROR: Reserve DUT failed&quot;&#10;  exit 1&#10;fi&#10;power=$(./bin/ailab power --type=on ${{ env.available }})&#10;echo $power&#10;if [[ $power =~ &quot;True&quot; ]]; then&#10;  echo &quot;Power on DUT pass&quot;&#10;else&#10;  echo &quot;ERROR: Power on DUT failed&quot;&#10;  exit 1&#10;fi&#10;"/>
    </command>
    <command Name="Load Image" depends="//@job.1/@command.1">
      <tool Name="echo &quot;Load image start&quot;&#10;echo &quot;bbl md5: ${{needs.build_image.outputs.md5_bbl}}&quot;&#10;echo &quot;dtb md5: ${{needs.build_image.outputs.md5_dtb}}&quot;&#10;test -d bin || mkdir ./bin&#10;test -f ./bin/aiload &amp;&amp; rm -rf ./bin/aiload&#10;wget -qc https://ai.b-bug.org/k510/downloads/github/aiload -O ./bin/aiload&#10;chmod +x ./bin/aiload&#10;echo $PULL_REQUEST_ID&#10;echo $GITHUB_RUN_ID&#10;./bin/aiload --pr_id $PULL_REQUEST_ID --job_id $GITHUB_RUN_ID --md5_dtb ${{needs.build_image.outputs.md5_dtb}} --md5_bbl ${{needs.build_image.outputs.md5_bbl}} ${{ env.available }}&#10;"/>
    </command>
    <command Name="Run Test" depends="//@job.1/@command.2">
      <tool Name="echo &quot;Run Test start&quot;&#10;test -d bin || mkdir ./bin&#10;test -f ./bin/airobot &amp;&amp; rm -rf ./bin/airobot&#10;wget -qc https://ai.b-bug.org/k510/downloads/github/airobot -O ./bin/airobot&#10;chmod +x ./bin/airobot&#10;test -f ./k510.robot &amp;&amp; rm -rf ./k510.robot&#10;wget -qc https://ai.b-bug.org/k510/downloads/github/k510.robot -O ./k510.robot&#10;./bin/ailab convert --dest=script --format yaml --file_name=var.yml ${{ env.available }}&#10;test -f var.yml || exit 1&#10;echo &quot;Run test case start&quot;&#10;./bin/airobot -m github -V var.yml -i github k510.robot&#10;echo &quot;Run test case pass&quot;&#10;"/>
    </command>
    <ifthenelse Condition="${{ always() }}">
      <true>
        <command Name="Release DUT" depends="//@job.1/@command.3">
          <tool Name="echo &quot;Release DUT start&quot;&#10;test -d bin || mkdir ./bin&#10;result=$(./bin/ailab update ${{ env.reserved }})&#10;echo $result&#10;if [[ $result =~ &quot;True&quot; ]]; then&#10;  echo &quot;Release DUT pass&quot;&#10;else&#10;  echo &quot;ERROR: Release DUT failed&quot;&#10;  exit 1&#10;fi&#10;power=$(./bin/ailab power --type=off ${{ env.available }})&#10;echo $power&#10;if [[ $power =~ &quot;True&quot; ]]; then&#10;  echo &quot;Power off DUT pass&quot;&#10;else&#10;  echo &quot;ERROR: Power off DUT failed&quot;&#10;  exit 1&#10;fi&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
</devops2:Pipeline>
