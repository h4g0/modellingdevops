<?xml version='1.0' encoding='UTF-8'?>
<devops2:Pipeline xmlns:xmi="http://www.omg.org/XMI" xmlns:devops2="http://www.example.org/devops2" Name="CI" xmi:version="2.0">
  <when Trigger="pull_request: null&#10;"/>
  <when Trigger="push:&#10;    branches:&#10;    - master&#10;    - develop&#10;    - bugfix/**&#10;    - feature/**&#10;    - fix/**&#10;    - pr/**&#10;"/>
  <environment Key="ASAN_OPTIONS" Value="allocator_may_return_null=1"/>
  <environment Key="GIT_FETCH_JOBS" Value="8"/>
  <environment Key="NET_RETRY_COUNT" Value="5"/>
  <environment Key="B2_CI_VERSION" Value="1"/>
  <environment Key="B2_VARIANT" Value="debug,release"/>
  <environment Key="B2_LINK" Value="shared,static"/>
  <environment Key="LCOV_BRANCH_COVERAGE" Value="0"/>
  <environment Key="CODECOV_NAME" Value="Github Actions"/>
  <environment Key="concurrency" Value="group: ${{format('{0}:{1}', github.repository, github.ref)}}&#10;cancel-in-progress: true&#10;"/>
  <job Name="posix">
    <environment Key="B2_USE_CCACHE" Value="1"/>
    <tool Name="${{matrix.os}}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        include:&#10;        -   compiler: gcc-4.4&#10;            cxxstd: 98,0x&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: gcc-4.6&#10;            cxxstd: 03,0x&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: gcc-4.7&#10;            cxxstd: 03,11&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: gcc-4.8&#10;            cxxstd: 03,11&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-4.9&#10;            cxxstd: 03,11&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: gcc-5&#10;            cxxstd: 03,11,14,1z&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-6&#10;            cxxstd: 03,11,14,17&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-7&#10;            cxxstd: 03,11,14,17&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-8&#10;            cxxstd: 03,11,14,17,2a&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-9&#10;            cxxstd: 03,11,14,17,2a&#10;            os: ubuntu-18.04&#10;        -   compiler: gcc-10&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;        -   compiler: gcc-11&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;        -   name: GCC w/ sanitizers&#10;            sanitize: true&#10;            compiler: gcc-11&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;        -   name: Collect coverage&#10;            coverage: true&#10;            compiler: gcc-10&#10;            cxxstd: 03,11&#10;            os: ubuntu-20.04&#10;            install: g++-10-multilib&#10;            address-model: 32,64&#10;        -   compiler: clang-3.5&#10;            cxxstd: 03,11&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: clang-3.6&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: clang-3.7&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: clang-3.8&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-20.04&#10;            container: ubuntu:16.04&#10;        -   compiler: clang-3.9&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-18.04&#10;        -   compiler: clang-4.0&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-18.04&#10;        -   compiler: clang-5.0&#10;            cxxstd: 03,11,14,1z&#10;            os: ubuntu-18.04&#10;        -   compiler: clang-6.0&#10;            cxxstd: 03,11,14,17&#10;            os: ubuntu-18.04&#10;        -   compiler: clang-7&#10;            cxxstd: 03,11,14,17&#10;            os: ubuntu-18.04&#10;        -   compiler: clang-8&#10;            cxxstd: 03,11,14,17,2a&#10;            os: ubuntu-18.04&#10;            install: clang-8 g++-7&#10;            gcc_toolchain: 7&#10;        -   compiler: clang-9&#10;            cxxstd: 03,11,14,17,2a&#10;            os: ubuntu-20.04&#10;        -   compiler: clang-10&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;        -   compiler: clang-11&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;        -   name: Clang w/ valgrind&#10;            valgrind: true&#10;            compiler: clang-12&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;            install: valgrind&#10;        -   compiler: clang-6.0&#10;            cxxstd: 03,11,14&#10;            os: ubuntu-18.04&#10;            stdlib: libc++&#10;            install: clang-6.0 libc++-dev libc++abi-dev&#10;        -   compiler: clang-12&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;            stdlib: libc++&#10;            install: clang-12 libc++-12-dev libc++abi-12-dev&#10;        -   name: Clang w/ sanitizers&#10;            sanitize: true&#10;            compiler: clang-12&#10;            cxxstd: 03,11,14,17,20&#10;            os: ubuntu-20.04&#10;            stdlib: libc++&#10;            install: clang-12 libc++-12-dev libc++abi-12-dev&#10;        -   compiler: clang&#10;            cxxstd: 03,11,14,17,2a&#10;            os: macos-10.15&#10;            sanitize: true&#10;        -   name: Coverity&#10;            coverity: true&#10;            compiler: clang-10&#10;            cxxstd: '17'&#10;            os: ubuntu-20.04&#10;            ccache: false&#10;        -   name: Big-endian&#10;            multiarch: true&#10;            compiler: clang&#10;            cxxstd: '17'&#10;            os: ubuntu-20.04&#10;            ccache: false&#10;            distro: fedora&#10;            edition: 34&#10;            arch: s390x&#10;"/>
    <tool Name="container: ${{matrix.container}}&#10;"/>
    <command Name="Setup environment">
      <tool Name="if [ -f &quot;/etc/debian_version&quot; ]; then&#10;    echo &quot;DEBIAN_FRONTEND=noninteractive&quot; &gt;&gt; $GITHUB_ENV&#10;    export DEBIAN_FRONTEND=noninteractive&#10;fi&#10;if [ -n &quot;${{matrix.container}}&quot; ] &amp;&amp; [ -f &quot;/etc/debian_version&quot; ]; then&#10;    apt-get -o Acquire::Retries=$NET_RETRY_COUNT update&#10;    apt-get -o Acquire::Retries=$NET_RETRY_COUNT install -y sudo software-properties-common&#10;    # Need (newer) git&#10;    for i in {1..${NET_RETRY_COUNT:-3}}; do sudo -E add-apt-repository -y ppa:git-core/ppa &amp;&amp; break || sleep 10; done&#10;    apt-get -o Acquire::Retries=$NET_RETRY_COUNT update&#10;    apt-get -o Acquire::Retries=$NET_RETRY_COUNT install -y g++ python libpython-dev git&#10;fi&#10;# multiple job types are not compatible with ccache, they use &quot;ccache: no&quot; in the matrix&#10;if [[ &quot;${{ matrix.ccache }}&quot; == &quot;no&quot; ]]; then&#10;    echo &quot;B2_USE_CCACHE=0&quot; &gt;&gt; $GITHUB_ENV&#10;fi&#10;if [[ &quot;${{ matrix.valgrind }}&quot; == &quot;yes&quot; ]]; then&#10;    echo &quot;B2_DEFINES=BOOST_NO_STRESS_TEST=1&quot; &gt;&gt; $GITHUB_ENV&#10;    echo &quot;B2_TESTFLAGS=testing.launcher=valgrind&quot; &gt;&gt; $GITHUB_ENV&#10;    echo &quot;B2_FLAGS=define=BOOST_USE_VALGRIND=1&quot; &gt;&gt; $GITHUB_ENV&#10;    echo &quot;VALGRIND_OPTS=--error-exitcode=1 --suppressions=libs/pool/test/suppressions.txt&quot; &gt;&gt; $GITHUB_ENV&#10;fi&#10;git config --global pack.threads 0&#10;"/>
    </command>
    <command depends="//@job.0/@command.0">
      <tool Name="actions/checkout@v3"/>
      <parameter Parameter="fetch-depth: ${{ matrix.coverage &amp;&amp; '0' || '1' }}&#10;"/>
    </command>
    <command Name="Fetch Boost.CI" depends="//@job.0/@ifthenelse.0/@true/@command.0">
      <tool Name="actions/checkout@v3"/>
      <parameter Parameter="repository: boostorg/boost-ci&#10;ref: master&#10;path: boost-ci-cloned&#10;"/>
    </command>
    <command Name="Get CI scripts folder" depends="//@job.0/@command.2">
      <tool Name="# Copy ci folder if not testing Boost.CI&#10;[[ &quot;$GITHUB_REPOSITORY&quot; =~ &quot;boost-ci&quot; ]] || cp -r boost-ci-cloned/ci .&#10;rm -rf boost-ci-cloned&#10;"/>
    </command>
    <command Name="Setup Boost" depends="//@job.0/@ifthenelse.3/@true/@command.0">
      <tool Name="source ci/github/install.sh"/>
      <parameter Parameter="B2_ADDRESS_MODEL: ${{matrix.address-model}}&#10;B2_COMPILER: ${{matrix.compiler}}&#10;B2_CXXSTD: ${{matrix.cxxstd}}&#10;B2_SANITIZE: ${{matrix.sanitize}}&#10;B2_STDLIB: ${{matrix.stdlib}}&#10;"/>
    </command>
    <ifthenelse Condition="env.B2_USE_CCACHE">
      <true>
        <command Name="Cache ccache" depends="//@job.0/@command.1">
          <tool Name="actions/cache@v3"/>
          <parameter Parameter="path: ~/.ccache&#10;key: ${{matrix.os}}-${{matrix.container}}-${{matrix.compiler}}-${{github.sha}}&#10;restore-keys: '${{matrix.os}}-${{matrix.container}}-${{matrix.compiler}}-&#10;&#10;    ${{matrix.os}}-${{matrix.container}}-${{matrix.compiler}}&#10;&#10;    '&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="startsWith(matrix.os, 'ubuntu')">
      <true>
        <command Name="Install packages" depends="//@job.0/@command.3">
          <tool Name="SOURCE_KEYS=(${{join(matrix.source_keys, ' ')}})&#10;SOURCES=(${{join(matrix.sources, ' ')}})&#10;# Add this by default&#10;SOURCES+=(ppa:ubuntu-toolchain-r/test)&#10;for key in &quot;${SOURCE_KEYS[@]}&quot;; do&#10;    for i in {1..$NET_RETRY_COUNT}; do&#10;        wget -O - &quot;$key&quot; | sudo apt-key add - &amp;&amp; break || sleep 10&#10;    done&#10;done&#10;for source in &quot;${SOURCES[@]}&quot;; do&#10;    for i in {1..$NET_RETRY_COUNT}; do&#10;        sudo add-apt-repository $source &amp;&amp; break || sleep 10&#10;    done&#10;done&#10;sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT update&#10;if [[ -z &quot;${{matrix.install}}&quot; ]]; then&#10;    pkgs=&quot;${{matrix.compiler}}&quot;&#10;    pkgs=&quot;${pkgs/gcc-/g++-}&quot;&#10;else&#10;    pkgs=&quot;${{matrix.install}}&quot;&#10;fi&#10;sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT install -y $pkgs&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.gcc_toolchain">
      <true>
        <command Name="Setup GCC Toolchain" depends="//@job.0/@ifthenelse.1/@true/@command.0">
          <tool Name="GCC_TOOLCHAIN_ROOT=&quot;$HOME/gcc-toolchain&quot;&#10;echo &quot;GCC_TOOLCHAIN_ROOT=$GCC_TOOLCHAIN_ROOT&quot; &gt;&gt; $GITHUB_ENV&#10;MULTIARCH_TRIPLET=&quot;$(dpkg-architecture -qDEB_HOST_MULTIARCH)&quot;&#10;mkdir -p &quot;$GCC_TOOLCHAIN_ROOT&quot;&#10;ln -s /usr/include &quot;$GCC_TOOLCHAIN_ROOT/include&quot;&#10;ln -s /usr/bin &quot;$GCC_TOOLCHAIN_ROOT/bin&quot;&#10;mkdir -p &quot;$GCC_TOOLCHAIN_ROOT/lib/gcc/$MULTIARCH_TRIPLET&quot;&#10;ln -s &quot;/usr/lib/gcc/$MULTIARCH_TRIPLET/${{matrix.gcc_toolchain}}&quot; &quot;$GCC_TOOLCHAIN_ROOT/lib/gcc/$MULTIARCH_TRIPLET/${{matrix.gcc_toolchain}}&quot;&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.multiarch">
      <true>
        <command Name="Setup multiarch" depends="//@job.0/@ifthenelse.2/@true/@command.0">
          <tool Name="sudo apt-get install --no-install-recommends -y binfmt-support qemu-user-static&#10;sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes&#10;git clone https://github.com/jeking3/bdde.git&#10;echo &quot;$(pwd)/bdde/bin/linux&quot; &gt;&gt; ${GITHUB_PATH}&#10;echo &quot;BDDE_DISTRO=${{ matrix.distro }}&quot; &gt;&gt; ${GITHUB_ENV}&#10;echo &quot;BDDE_EDITION=${{ matrix.edition }}&quot; &gt;&gt; ${GITHUB_ENV}&#10;echo &quot;BDDE_ARCH=${{ matrix.arch }}&quot; &gt;&gt; ${GITHUB_ENV}&#10;echo &quot;B2_DEFINES=BOOST_NO_STRESS_TEST=1&quot; &gt;&gt; ${GITHUB_ENV}&#10;echo &quot;B2_WRAPPER=bdde&quot; &gt;&gt; ${GITHUB_ENV}&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.coverage">
      <true>
        <command Name="Setup coverage collection" depends="//@job.0/@command.4">
          <tool Name="ci/github/codecov.sh &quot;setup&quot;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="!matrix.coverity">
      <true>
        <command Name="Run tests" depends="//@job.0/@ifthenelse.4/@true/@command.0">
          <tool Name="ci/build.sh"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.coverage">
      <true>
        <command Name="Upload coverage" depends="//@job.0/@ifthenelse.5/@true/@command.0">
          <tool Name="ci/codecov.sh &quot;upload&quot;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.coverity &amp;&amp; github.event_name == 'push' &amp;&amp; (github.ref_name == 'develop' || github.ref_name == 'master')">
      <true>
        <command Name="Run coverity" depends="//@job.0/@ifthenelse.6/@true/@command.0">
          <tool Name="ci/github/coverity.sh"/>
          <parameter Parameter="COVERITY_SCAN_NOTIFICATION_EMAIL: ${{ secrets.COVERITY_SCAN_NOTIFICATION_EMAIL }}&#10;COVERITY_SCAN_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
  <job Name="windows">
    <tool Name="${{matrix.os}}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        include:&#10;        -   toolset: msvc-14.2&#10;            cxxstd: 14,17,20&#10;            addrmd: 32,64&#10;            os: windows-2019&#10;        -   name: Collect coverage&#10;            coverage: true&#10;            toolset: msvc-14.3&#10;            cxxstd: 14,17,20&#10;            addrmd: 32,64&#10;            os: windows-2022&#10;        -   toolset: gcc&#10;            cxxstd: 03,11,14,17,2a&#10;            addrmd: '64'&#10;            os: windows-2019&#10;"/>
    <command>
      <tool Name="actions/checkout@v2"/>
    </command>
    <command Name="Fetch Boost.CI" depends="//@job.1/@command.0">
      <tool Name="actions/checkout@v2"/>
      <parameter Parameter="repository: boostorg/boost-ci&#10;ref: master&#10;path: boost-ci-cloned&#10;"/>
    </command>
    <command Name="Get CI scripts folder" depends="//@job.1/@command.1">
      <tool Name="REM Copy ci folder if not testing Boost.CI&#10;if &quot;%GITHUB_REPOSITORY%&quot; == &quot;%GITHUB_REPOSITORY:boost-ci=%&quot; xcopy /s /e /q /i /y boost-ci-cloned\ci .\ci&#10;rmdir /s /q boost-ci-cloned&#10;"/>
    </command>
    <command Name="Setup Boost" depends="//@job.1/@command.2">
      <tool Name="ci\github\install.bat"/>
    </command>
    <ifthenelse Condition="!matrix.coverage">
      <true>
        <command Name="Run tests" depends="//@job.1/@command.3">
          <tool Name="ci\build.bat"/>
          <parameter Parameter="B2_TOOLSET: ${{matrix.toolset}}&#10;B2_CXXSTD: ${{matrix.cxxstd}}&#10;B2_ADDRESS_MODEL: ${{matrix.addrmd}}&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.coverage">
      <true>
        <command Name="Collect coverage" depends="//@job.1/@ifthenelse.0/@true/@command.0">
          <tool Name="ci\opencppcoverage.ps1"/>
          <parameter Parameter="B2_TOOLSET: ${{matrix.toolset}}&#10;B2_CXXSTD: ${{matrix.cxxstd}}&#10;B2_ADDRESS_MODEL: ${{matrix.addrmd}}&#10;"/>
        </command>
      </true>
    </ifthenelse>
    <ifthenelse Condition="matrix.coverage">
      <true>
        <command Name="Upload coverage" depends="//@job.1/@ifthenelse.1/@true/@command.0">
          <tool Name="codecov/codecov-action@v2"/>
          <parameter Parameter="files: __out/cobertura.xml&#10;"/>
        </command>
      </true>
    </ifthenelse>
  </job>
  <job Name="CMake">
    <tool Name="${{matrix.os}}"/>
    <tool Name="strategy:&#10;    fail-fast: false&#10;    matrix:&#10;        include:&#10;        -   os: ubuntu-20.04&#10;            build_shared: true&#10;            build_type: Release&#10;            generator: Unix Makefiles&#10;        -   os: ubuntu-20.04&#10;            build_shared: false&#10;            build_type: Debug&#10;            generator: Unix Makefiles&#10;        -   os: windows-2019&#10;            build_shared: true&#10;            build_type: Release&#10;            generator: Visual Studio 16 2019&#10;        -   os: windows-2019&#10;            build_shared: false&#10;            build_type: Debug&#10;            generator: Visual Studio 16 2019&#10;"/>
    <command>
      <tool Name="actions/checkout@v2"/>
    </command>
    <command Name="Fetch Boost.CI" depends="//@job.2/@command.0">
      <tool Name="actions/checkout@v2"/>
      <parameter Parameter="repository: boostorg/boost-ci&#10;ref: master&#10;path: boost-ci-cloned&#10;"/>
    </command>
    <command Name="Get CI scripts folder" depends="//@job.2/@command.1">
      <tool Name="# Copy ci folder if not testing Boost.CI&#10;[[ &quot;$GITHUB_REPOSITORY&quot; =~ &quot;boost-ci&quot; ]] || cp -r boost-ci-cloned/ci .&#10;rm -rf boost-ci-cloned&#10;"/>
    </command>
    <command Name="Setup Boost" depends="//@job.2/@command.2">
      <tool Name="source ci/github/install.sh"/>
      <parameter Parameter="B2_DONT_BOOTSTRAP: 1&#10;"/>
    </command>
    <command Name="Run CMake" depends="//@job.2/@command.3">
      <tool Name="cd &quot;$BOOST_ROOT&quot;&#10;mkdir __build_cmake_test__ &amp;&amp; cd __build_cmake_test__&#10;cmake -G &quot;${{matrix.generator}}&quot; -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DBOOST_INCLUDE_LIBRARIES=$SELF -DBUILD_SHARED_LIBS=${{matrix.build_shared}} -DBUILD_TESTING=ON -DBoost_VERBOSE=ON ..&#10;cmake --build . --config ${{matrix.build_type}}&#10;"/>
    </command>
  </job>
</devops2:Pipeline>
